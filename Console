
from tkinter import *
import time
import os
import requests
import sys
from win32api import GetSystemMetrics as res
import paho.mqtt.client as mqtt #import the client1
root = Tk()
root.overrideredirect(True)
root.geometry('900x400')
root.geometry('+100+100')
#root.resizable(False, False)
root.title('ROOT')
root.configure(bg='black')
root.wm_attributes('-alpha', 0.7)

curr_pose_x = 0
curr_pose_y = 0
dif_x=0
dif_y=0
pub_topic = '/VishalKD/online/check'
sub_topic ='/VishalKD/online/check1'
broker_port = 1883
broker_url = "broker.mqttdashboard.com"


def ret(data):
    pub_topic = '/VishalKD/online/check'
    sub_topic ='/VishalKD/online/check1'
    broker_port = 1883
    broker_url = "broker.mqttdashboard.com"
    msg = cmd.get()
    if msg[:7] == './close':
        local_time = time.localtime()
        str_time = time.strftime('%M',local_time)
        if msg[7:9] == str_time:
            exit()
        else:
            cmd.delete(0, END)

    elif msg[:6] == 'online':
        if msg[7] == '-':
            mqtt_publish(broker_url, broker_port, pub_topic, msg, 0)
            cmd.delete(0, END)

    #above if-elif is only for external use

    else:
        msg = cmd.get()
        if msg[:3] == 'cmd':
            os.system(msg[3:]+'>cmddataforrootterminal.txt')
            time.sleep(1)
            f = open('cmddataforrootterminal.txt','r')
            cht.config(state='normal')
            cht.insert(END, f.read()+'\n')
            cht.config(state='disabled')
            f.close()
            os.remove('cmddataforrootterminal.txt')

        elif msg[:4] == 'size':
            if msg[5:] == 'p':
                print(root.winfo_height())
                print(root.winfo_width())
            else:
                root.geometry(msg[5:])

        elif msg == 'clear':
            cht.config(state='normal')
            cht.delete('1.0', END)
            cht.config(state='disabled')

        elif msg == 'log -n':
            global l1
            l1 = Tk()
            l1.overrideredirect(True)
            l1.geometry('400x200')
            pos = '+'+str(root.winfo_width() + root.winfo_x()) + '+' + str(root.winfo_y())
            l1.geometry(pos)
            l1.configure(bg='black')
            l1.wm_attributes('-alpha', 0.7)
            title_bar1 = Frame(l1, bg='cyan', height=15, bd=2,highlightthickness=0)
            title_bar1.pack(side=TOP, fill=X)
        cmd.delete(0, END)
    cmd.delete(0, END)


def move_window(event):
    global curr_pose_x
    global curr_pose_y
    global dif_x
    global dif_y
    root.geometry('+{0}+{1}'.format(event.x_root - dif_x, event.y_root - dif_y))
    try:
        l1.geometry('+{0}+{1}'.format(event.x_root - dif_x+root.winfo_width(), event.y_root - dif_y))
    except:
        pass
    startx = event.x_root
    starty = event.y_root

def get_pos(event):
    global curr_pose_x
    global curr_pose_y
    global dif_x
    global dif_y
    curr_pose_x = event.x_root
    curr_pose_y = event.y_root
    dif_x = curr_pose_x - root.winfo_x()
    dif_y = curr_pose_y - root.winfo_y()
    cmd.focus_set()

def mqtt_publish(arg_broker_url, arg_broker_port, arg_mqtt_topic, arg_mqtt_message, arg_mqtt_qos):
    try:        
        mqtt_client = mqtt.Client("mqtt_pub")
        mqtt_client.connect(arg_broker_url, arg_broker_port)
        mqtt_client.loop_start()

        print("Publishing message to topic", arg_mqtt_topic)
        mqtt_client.publish(arg_mqtt_topic, arg_mqtt_message, arg_mqtt_qos)
        time.sleep(0.1) # wait

        mqtt_client.loop_stop() #stop the loop
        return 0
    except:
        return -1

def mqtt_subscribe_thread_start(arg_callback_func, arg_broker_url, arg_broker_port, arg_mqtt_topic, arg_mqtt_qos):
    try:
        mqtt_client = mqtt.Client()
        mqtt_client.on_message = arg_callback_func
        mqtt_client.connect(arg_broker_url, arg_broker_port)
        mqtt_client.subscribe(arg_mqtt_topic, arg_mqtt_qos)
        time.sleep(1) # wait
        # mqtt_client.loop_forever() # starts a blocking infinite loop
        mqtt_client.loop_start()    # starts a new thread
        return 0
    except:
        return -1

def mqtt_sub_cb(client, userdata, message):
    payload = str(message.payload.decode("utf-8"))
    msg = payload
    cht.config(state='normal')
    cht.insert(END, msg+'\n')
    cht.config(state='disabled')
    

#label area
iot_to_ros=mqtt_subscribe_thread_start(mqtt_sub_cb,broker_url,broker_port,sub_topic,0)

na_me = Label(root, fg='#3EE115', bg='black',font=("Verdana", 9, 'bold'), text='VishalKD@Master $ ')
title_bar = Frame(root, bg='green', height=15, bd=2,highlightthickness=0)
cht = Text(root, fg = '#3EE115',height=25, width=80, bg='black', font=("Verdana", 9, "bold"))
cmd = Entry(root, width =77, fg='#3EE115', bg='black', font=("Verdana", 11, "bold"))

title_bar.pack(side=TOP, fill=X)
cht.pack(fill = BOTH, expand=1)
cht.config(state='disable')
na_me.pack(side = LEFT)
cmd.pack(fill = X)


#na_me.place(relx=0.0, rely=0.985, anchor='sw')



#cmd.place(x = 134, y=368, height = 32)
cmd.focus_set()

root.bind('<Return>', ret)
title_bar.bind('<B1-Motion>', move_window)
title_bar.bind('<Button-1>', get_pos)


root.mainloop()
